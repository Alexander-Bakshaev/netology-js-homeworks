// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ —Å–∏–º–≤–æ–ª–∞
function getCharLanguage(char) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
    if (/^[–∞-—è—ë–ê-–Ø–Å]+$/.test(char)) {
        return 'ru';
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –ª–∞—Ç–∏–Ω–∏—Ü–µ–π
    if (/^[a-zA-Z]+$/.test(char)) {
        return 'en';
    }
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–∏—Ñ—Ä—ã, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
    return 'other';
}

class Game {
    constructor(container) {
        this.container = container;
        this.wordElement = container.querySelector('.word');
        this.winsElement = container.querySelector('.status__wins');
        this.lossElement = container.querySelector('.status__loss');
        this.timerElement = container.querySelector('.timer');
        this.timer = null;
        this.timeLeft = 0;
        this.animationFrame = null;

        this.reset();
        this.registerEvents();
    }

    showMessage(text, type = 'success') {
        const message = document.getElementById('message');
        message.textContent = text;
        message.className = `message ${type} show`;
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            message.classList.remove('show');
        }, 2000);
    }

    reset() {
        this.setNewWord();
        this.winsElement.textContent = 0;
        this.lossElement.textContent = 0;
        this.startTimer();
    }

    registerEvents() {
        document.addEventListener('keydown', (event) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
            if (this.isLayoutSwitchKey(event)) {
                return;
            }

            const inputChar = event.key;
            const currentSymbol = this.currentSymbol.textContent;
            
            // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤
            const currentLang = getCharLanguage(currentSymbol);
            const inputLang = getCharLanguage(inputChar);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—á—ë—Ç–æ–º —è–∑—ã–∫–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            if (this.isMatchingCharacter(inputChar, currentSymbol, currentLang, inputLang)) {
                this.success();
            } else {
                this.fail();
            }
        });
    }

    isLayoutSwitchKey(event) {
        const layoutSwitchKeys = [
            'Control', 'Shift', 'Alt', 'CapsLock', 
            'Meta', 'Tab', 'Escape', 'Enter', 'Option'
        ];
        return layoutSwitchKeys.includes(event.key) || 
               event.ctrlKey || 
               event.altKey || 
               event.metaKey;
    }

    isMatchingCharacter(inputChar, currentSymbol, currentLang, inputLang) {
        // –ï—Å–ª–∏ —è–∑—ã–∫–∏ —Ä–∞–∑–Ω—ã–µ –∏ —ç—Ç–æ –Ω–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (currentLang !== 'other' && inputLang !== 'other' && 
            currentLang !== inputLang) {
            return false;
        }
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        return inputChar.toLowerCase() === currentSymbol.toLowerCase();
    }

    success() {
        this.currentSymbol.classList.remove('symbol_current');
        this.currentSymbol.classList.add('symbol_correct');
        this.currentSymbol = this.currentSymbol.nextElementSibling;

        if (this.currentSymbol) {
            this.currentSymbol.classList.add('symbol_current');
        } else {
            if (++this.winsElement.textContent === 10) {
                this.showMessage('üéâ –ü–æ–±–µ–¥–∞!', 'success');
                this.reset();
            } else {
                this.setNewWord();
            }
        }
    }

    fail() {
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ
        this.wordElement.classList.add('word_incorrect');
        
        // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            this.wordElement.classList.remove('word_incorrect');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
            if (++this.lossElement.textContent === 5) {
                this.showMessage('üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!', 'error');
                this.reset();
            } else {
                this.setNewWord();
            }
        }, 300);
    }

    setNewWord() {
        const word = this.getWord();
        this.renderWord(word);
        this.startTimer();
    }

    getWord() {
        const words = [
            // –†—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞
            '–∫–æ—Ç', '–¥–æ–º', '–º–∞–º–∞', '–ø–∞–ø–∞', '—Å–æ–ª–Ω—Ü–µ', '–ª—É–Ω–∞', '–∑–≤–µ–∑–¥–∞',
            '–≤–æ–¥–∞', '–æ–≥–æ–Ω—å', '–∑–µ–º–ª—è', '–≤–µ—Ç–µ—Ä', '—è–±–ª–æ–∫–æ', '–±–∞–Ω–∞–Ω', '–≥—Ä—É—à–∞',
            '–∞–ø–µ–ª—å—Å–∏–Ω', '–∫–Ω–∏–≥–∞', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–æ–∫–Ω–æ', '–¥–≤–µ—Ä—å', '—Å—Ç–µ–Ω–∞',
            '–ø–æ–ª', '–ø–æ—Ç–æ–ª–æ–∫', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¥—Ä—É–∑—å—è', '–ª—é–±–æ–≤—å', '—Å—á–∞—Å—Ç—å–µ',
            
            // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
            'cat', 'dog', 'house', 'apple', 'banana', 'orange', 'sun', 'moon',
            'star', 'water', 'fire', 'earth', 'wind', 'book', 'table', 'chair',
            'window', 'door', 'wall', 'floor', 'ceiling', 'programming', 'friends',
            'love', 'happiness',
            
            // –°–º–µ—à–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            '—è –ª—é–±–ª—é kitkat', '–º–æ–π email@example.com', '–ø–∞—Ä–æ–ª—å: 12345',
            'hello –º–∏—Ä', '–ø—Ä–∏–≤–µ—Ç world', '–∫–æ—Ç cat', '—Å–æ–±–∞–∫–∞ dog',
            '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ',
            'JavaScript is awesome!'
        ];
        
        const index = Math.floor(Math.random() * words.length);
        return words[index];
    }

    renderWord(word) {
        if (!word || word.length === 0) {
            console.error('–ü–µ—Ä–µ–¥–∞–Ω–æ –ø—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ');
            return;
        }
        
        const html = [...word]
            .map((char, i) => {
                const lang = getCharLanguage(char);
                return `<span 
                    class="symbol ${i === 0 ? 'symbol_current' : ''}" 
                    data-lang="${lang}"
                >${char}</span>`;
            })
            .join('');
        
        this.wordElement.innerHTML = html;
        this.currentSymbol = this.wordElement.querySelector('.symbol_current');
        this.timeLeft = word.length * 1000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        this.updateTimer();
    }

    startTimer() {
        // –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
        if (this.animationFrame) {
            cancelAnimationFrame(this.animationFrame);
        }
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (this.timer) {
            clearInterval(this.timer);
        }
        
        const startTime = Date.now();
        const duration = this.timeLeft;
        
        const animate = () => {
            const elapsed = Date.now() - startTime;
            this.timeLeft = Math.max(0, duration - elapsed);
            
            this.updateTimer();
            
            if (this.timeLeft > 0) {
                this.animationFrame = requestAnimationFrame(animate);
            } else {
                this.fail();
            }
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        this.animationFrame = requestAnimationFrame(animate);
    }
    
    updateTimer() {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è —Å –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –∑–Ω–∞–∫–æ–º
        this.timerElement.textContent = (this.timeLeft / 1000).toFixed(1);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–º—Å—è –≤—Ä–µ–º–µ–Ω–∏
        if (this.timeLeft < 3000) { // –ú–µ–Ω—å—à–µ 3 —Å–µ–∫—É–Ω–¥
            this.timerElement.classList.add('timer-warning');
        } else {
            this.timerElement.classList.remove('timer-warning');
        }
    }
}


new Game(document.getElementById('game'));